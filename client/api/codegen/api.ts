// tslint:disable
/**
 * Brood-Clash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ModelsAnswer
 */
export interface ModelsAnswer {
    /**
     * 
     * @type {string}
     * @memberof ModelsAnswer
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsAnswer
     */
    points?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsAnswer
     */
    revealed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsAnswer
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface ModelsQuestion
 */
export interface ModelsQuestion {
    /**
     * 
     * @type {Array<ModelsAnswer>}
     * @memberof ModelsQuestion
     */
    answers?: Array<ModelsAnswer>;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsQuestion
     */
    hasBeenShown?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsQuestion
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsQuestion
     */
    text?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Question
         * @param {string} id Question ID, must be UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestion(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteQuestion.');
            }
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CodeAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuestions(options: any = {}): RequestArgs {
            const localVarPath = `/questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CodeAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Current Question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentQuestion(options: any = {}): RequestArgs {
            const localVarPath = `/currentQuestion`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CodeAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Incorrect Answer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incorrectAnswer(options: any = {}): RequestArgs {
            const localVarPath = `/incorrectAnswer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CodeAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Questions
         * @param {Array<ModelsQuestion>} questions Questions to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQuestions(questions: Array<ModelsQuestion>, options: any = {}): RequestArgs {
            // verify required parameter 'questions' is not null or undefined
            if (questions === null || questions === undefined) {
                throw new RequiredError('questions','Required parameter questions was null or undefined when calling postQuestions.');
            }
            const localVarPath = `/questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CodeAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof questions !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(questions !== undefined ? questions : {}) : (questions || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset Game State
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetGameState(options: any = {}): RequestArgs {
            const localVarPath = `/reset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CodeAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reveal answer
         * @param {string} id Answer ID, must be UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revealAnswer(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling revealAnswer.');
            }
            const localVarPath = `/answers/{id}/reveal`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CodeAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Select Question
         * @param {string} id Question ID, must be UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectQuestion(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling selectQuestion.');
            }
            const localVarPath = `/questions/{id}/select`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CodeAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test(options: any = {}): RequestArgs {
            const localVarPath = `/test`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CodeAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Question
         * @param {string} id Question ID, must be UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestion(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteQuestion(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get All Questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuestions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsQuestion>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAllQuestions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Current Question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentQuestion(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsQuestion> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getCurrentQuestion(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Incorrect Answer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incorrectAnswer(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).incorrectAnswer(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Post Questions
         * @param {Array<ModelsQuestion>} questions Questions to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQuestions(questions: Array<ModelsQuestion>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postQuestions(questions, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Reset Game State
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetGameState(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).resetGameState(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Reveal answer
         * @param {string} id Answer ID, must be UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revealAnswer(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).revealAnswer(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Select Question
         * @param {string} id Question ID, must be UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectQuestion(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsQuestion> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).selectQuestion(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).test(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete Question
         * @param {string} id Question ID, must be UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestion(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteQuestion(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get All Questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllQuestions(options?: any): AxiosPromise<Array<ModelsQuestion>> {
            return DefaultApiFp(configuration).getAllQuestions(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get Current Question
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentQuestion(options?: any): AxiosPromise<ModelsQuestion> {
            return DefaultApiFp(configuration).getCurrentQuestion(options)(axios, basePath);
        },
        /**
         * 
         * @summary Incorrect Answer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incorrectAnswer(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).incorrectAnswer(options)(axios, basePath);
        },
        /**
         * 
         * @summary Post Questions
         * @param {Array<ModelsQuestion>} questions Questions to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQuestions(questions: Array<ModelsQuestion>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postQuestions(questions, options)(axios, basePath);
        },
        /**
         * 
         * @summary Reset Game State
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetGameState(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).resetGameState(options)(axios, basePath);
        },
        /**
         * 
         * @summary Reveal answer
         * @param {string} id Answer ID, must be UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revealAnswer(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).revealAnswer(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Select Question
         * @param {string} id Question ID, must be UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectQuestion(id: string, options?: any): AxiosPromise<ModelsQuestion> {
            return DefaultApiFp(configuration).selectQuestion(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).test(options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Delete Question
     * @param {string} id Question ID, must be UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteQuestion(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteQuestion(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get All Questions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllQuestions(options?: any) {
        return DefaultApiFp(this.configuration).getAllQuestions(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get Current Question
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentQuestion(options?: any) {
        return DefaultApiFp(this.configuration).getCurrentQuestion(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Incorrect Answer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public incorrectAnswer(options?: any) {
        return DefaultApiFp(this.configuration).incorrectAnswer(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Post Questions
     * @param {Array<ModelsQuestion>} questions Questions to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postQuestions(questions: Array<ModelsQuestion>, options?: any) {
        return DefaultApiFp(this.configuration).postQuestions(questions, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Reset Game State
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resetGameState(options?: any) {
        return DefaultApiFp(this.configuration).resetGameState(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Reveal answer
     * @param {string} id Answer ID, must be UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public revealAnswer(id: string, options?: any) {
        return DefaultApiFp(this.configuration).revealAnswer(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Select Question
     * @param {string} id Question ID, must be UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public selectQuestion(id: string, options?: any) {
        return DefaultApiFp(this.configuration).selectQuestion(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public test(options?: any) {
        return DefaultApiFp(this.configuration).test(options)(this.axios, this.basePath);
    }

}


