// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Backend API for Brood Clash",
    "title": "Brood Clash",
    "contact": {
      "name": "Ryan's mom"
    },
    "version": "0.1.0"
  },
  "host": "localhost:3000",
  "basePath": "/api/v0",
  "paths": {
    "/authTest": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Test the authorization code",
        "operationId": "authTest",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      }
    },
    "/presenter/websocket": {
      "get": {
        "summary": "Establish a presenter websocket",
        "operationId": "websocket",
        "responses": {
          "101": {
            "description": "Switching Protocols"
          }
        }
      }
    },
    "/questions": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get all questions",
        "operationId": "getQuestions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/question"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new question",
        "operationId": "createQuestion",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      }
    },
    "/questions/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a question by ID",
        "operationId": "getQuestion",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/question"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      }
    },
    "/questions/{questionId}/answers/{answerId}/reveal": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Marks an answer as revealed",
        "operationId": "revealAnswer",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "questionId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "answerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      }
    }
  },
  "definitions": {
    "answer": {
      "type": "object",
      "required": [
        "text",
        "points"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "points": {
          "type": "integer",
          "format": "int32"
        },
        "revealed": {
          "type": "boolean"
        },
        "text": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "question": {
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "answers": {
          "type": "array",
          "maxItems": 8,
          "minItems": 8,
          "items": {
            "$ref": "#/definitions/answer"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "text": {
          "type": "string",
          "minLength": 1
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Backend API for Brood Clash",
    "title": "Brood Clash",
    "contact": {
      "name": "Ryan's mom"
    },
    "version": "0.1.0"
  },
  "host": "localhost:3000",
  "basePath": "/api/v0",
  "paths": {
    "/authTest": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Test the authorization code",
        "operationId": "authTest",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      }
    },
    "/presenter/websocket": {
      "get": {
        "summary": "Establish a presenter websocket",
        "operationId": "websocket",
        "responses": {
          "101": {
            "description": "Switching Protocols"
          }
        }
      }
    },
    "/questions": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get all questions",
        "operationId": "getQuestions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/question"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new question",
        "operationId": "createQuestion",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      }
    },
    "/questions/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a question by ID",
        "operationId": "getQuestion",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/question"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      }
    },
    "/questions/{questionId}/answers/{answerId}/reveal": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Marks an answer as revealed",
        "operationId": "revealAnswer",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "questionId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "answerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "Unknown error"
          }
        }
      }
    }
  },
  "definitions": {
    "answer": {
      "type": "object",
      "required": [
        "text",
        "points"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "points": {
          "type": "integer",
          "format": "int32"
        },
        "revealed": {
          "type": "boolean"
        },
        "text": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "question": {
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "answers": {
          "type": "array",
          "maxItems": 8,
          "minItems": 8,
          "items": {
            "$ref": "#/definitions/answer"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "text": {
          "type": "string",
          "minLength": 1
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
}
